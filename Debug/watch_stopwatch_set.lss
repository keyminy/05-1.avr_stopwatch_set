
watch_stopwatch_set.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000004ca  0000055e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010c  0080010c  0000056a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3c  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2f  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005dd  00000000  00000000  00001dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055f  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  00002a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9b c0       	rjmp	.+310    	; 0x178 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ec       	ldi	r30, 0xCA	; 202
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d6 d1       	rcall	.+940    	; 0x470 <main>
  c4:	00 c2       	rjmp	.+1024   	; 0x4c6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:

// 76543210
// DDRD &= 0x0f; // port[7:4]까지 input으로 선언된것
void init_button(void){
	// one's complement
	BUTTON_DDR &= ~((1<<BUTTON1_PIN) | (1<<BUTTON2_PIN) | (1<<BUTTON3_PIN) | (1<<BUTTON4_PIN));
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <get_button>:
int get_button(int button_pin, int button_number){
	int current_state;

	//예)BUTTON1은 4가 넘어옴, 2는 5, 3은 5...
	//BUTTON_PIN값은 눌리면1 안눌리면 0값을 감지함
	current_state = BUTTON_PIN & (1 << button_pin); // 10000 (1<<4결과)
  d0:	40 b3       	in	r20, 0x10	; 16
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <get_button+0x10>
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <get_button+0xc>
  e4:	cf 01       	movw	r24, r30
  e6:	84 23       	and	r24, r20
  e8:	95 23       	and	r25, r21
	//current_state변수로 버튼 값을 읽습니다.

	if(current_state && previous_button_status[button_number]== BUTTON_RELEASE){
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	b9 f0       	breq	.+46     	; 0x11c <get_button+0x4c>
  ee:	fb 01       	movw	r30, r22
  f0:	e4 5f       	subi	r30, 0xF4	; 244
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	20 81       	ld	r18, Z
  f6:	21 11       	cpse	r18, r1
  f8:	11 c0       	rjmp	.+34     	; 0x11c <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	ff ef       	ldi	r31, 0xFF	; 255
  fc:	2d ee       	ldi	r18, 0xED	; 237
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	f1 50       	subi	r31, 0x01	; 1
 102:	20 40       	sbci	r18, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <get_button+0x30>
 108:	00 c0       	rjmp	.+0      	; 0x10a <get_button+0x3a>
 10a:	00 00       	nop
		// 버튼이 처음 눌러진 상태
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		previous_button_status[button_number] = BUTTON_PRESS; // 처음 눌러진 상태가 아니다
 10c:	fb 01       	movw	r30, r22
 10e:	e4 5f       	subi	r30, 0xF4	; 244
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
		return 0; //아직 완전히 눌렀다 떼어진 상태가 아니다.
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
	} // 버튼이 이전에 눌러진 상태였으면 현재는 떼어진 상태
	else if(previous_button_status[button_number] == BUTTON_PRESS && current_state == BUTTON_RELEASE){
 11c:	fb 01       	movw	r30, r22
 11e:	e4 5f       	subi	r30, 0xF4	; 244
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	20 81       	ld	r18, Z
 124:	21 30       	cpi	r18, 0x01	; 1
 126:	91 f4       	brne	.+36     	; 0x14c <get_button+0x7c>
 128:	89 2b       	or	r24, r25
 12a:	99 f4       	brne	.+38     	; 0x152 <get_button+0x82>
		previous_button_status[button_number] = BUTTON_RELEASE; // 다음 버튼 상태를 체크하기 위해 초기화
 12c:	fb 01       	movw	r30, r22
 12e:	e4 5f       	subi	r30, 0xF4	; 244
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	10 82       	st	Z, r1
 134:	9f ef       	ldi	r25, 0xFF	; 255
 136:	ed ee       	ldi	r30, 0xED	; 237
 138:	f2 e0       	ldi	r31, 0x02	; 2
 13a:	91 50       	subi	r25, 0x01	; 1
 13c:	e0 40       	sbci	r30, 0x00	; 0
 13e:	f0 40       	sbci	r31, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <get_button+0x6a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <get_button+0x74>
 144:	00 00       	nop
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		return 1; // 완전히 눌렀다 떼어진 상태
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
	}
	// 아직 HIGH인 상태인 것이지
	// 아직 완전히 스위치를 눌렀다 뗀 상태가 아니거나 스위치가 open된 상태 -> return 0;
	return 0;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <init_fnd>:
﻿#include "fnd.h"

void init_fnd(void){
	// PortC를 모두 출력(FND 8pin)으로 하는거니까 모두 write모드로 하기
	FND_DATA_DDR = 0xFF;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	84 bb       	out	0x14, r24	; 20
	FND_DIGIT_DDR |= 0xF0;// 4,5,6,7만 출력이니까 거기만 write모드
 15c:	87 b3       	in	r24, 0x17	; 23
 15e:	80 6f       	ori	r24, 0xF0	; 240
 160:	87 bb       	out	0x17, r24	; 23
	
	FND_DATA_PORT = 0x00; // PORTC 설정 : FND를 all off
 162:	15 ba       	out	0x15, r1	; 21
 164:	08 95       	ret

00000166 <init_timer0>:
void init_timer0();


//timer0를 초기화 한다.
void init_timer0(){
	TCNT0 = 6; // 6부터 count하는것임, TCNT : 0~256카운트하기때문에, 정확히 1ms마다 TIMER0_OVF_vect로 진입한다.
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	82 bf       	out	0x32, r24	; 50

	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00); // (1)분주비 64로 셋팅(p.296 표13-1 참고)
 16a:	83 b7       	in	r24, 0x33	; 51
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0; // (2) TIMER0 overflow interrupt허용
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	87 bf       	out	0x37, r24	; 55
	sei(); // 전역 인터럽트 허용
 174:	78 94       	sei
 176:	08 95       	ret

00000178 <__vector_16>:
}

// 256개의 pulse(=1ms)를 count하면 이곳으로 자동적으로 진입한다.
// 즉, 256개의 pulse == 1ms
ISR(TIMER0_OVF_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	0b b6       	in	r0, 0x3b	; 59
 184:	0f 92       	push	r0
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	/* 인터럽트 루틴을 가능한 짧게 짜라, ms_count만 증가시키고 빠져나오게함 */
	TCNT0=6; // 6 ~ 256개의 pulse카운트 --> 1ms를 맞춰주기 위해서 TCNT0을 6으로 설정
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	82 bf       	out	0x32, r24	; 50
	main_stopwatch_ptr->display_count++;
 192:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <main_stopwatch_ptr>
 196:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <main_stopwatch_ptr+0x1>
 19a:	80 81       	ld	r24, Z
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 83       	st	Z, r24
	if(main_stopwatch_ptr->state == RUNNING){
 1a0:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <main_stopwatch_ptr>
 1a4:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <main_stopwatch_ptr+0x1>
 1a8:	85 81       	ldd	r24, Z+5	; 0x05
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	29 f4       	brne	.+10     	; 0x1b8 <__vector_16+0x40>
		main_stopwatch_ptr->ms_count++;
 1ae:	81 81       	ldd	r24, Z+1	; 0x01
 1b0:	92 81       	ldd	r25, Z+2	; 0x02
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	92 83       	std	Z+2, r25	; 0x02
 1b6:	81 83       	std	Z+1, r24	; 0x01
	}
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0b be       	out	0x3b, r0	; 59
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <stop_watch_state>:
		stop_watch_state(&stopwatch);
		fnd_display(&stopwatch);
    }
}

void stop_watch_state(Stopwatch* pStopwatch){
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
	switch(pStopwatch->state){
 1d4:	8d 81       	ldd	r24, Y+5	; 0x05
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	b1 f0       	breq	.+44     	; 0x206 <stop_watch_state+0x38>
 1da:	20 f0       	brcs	.+8      	; 0x1e4 <stop_watch_state+0x16>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	09 f4       	brne	.+2      	; 0x1e2 <stop_watch_state+0x14>
 1e0:	3c c0       	rjmp	.+120    	; 0x25a <stop_watch_state+0x8c>
 1e2:	4d c0       	rjmp	.+154    	; 0x27e <stop_watch_state+0xb0>
		case IDLE:
			pStopwatch->ms_count = 0;
 1e4:	1a 82       	std	Y+2, r1	; 0x02
 1e6:	19 82       	std	Y+1, r1	; 0x01
			pStopwatch->sec_count = 0;
 1e8:	1c 82       	std	Y+4, r1	; 0x04
 1ea:	1b 82       	std	Y+3, r1	; 0x03
			FND_DIGIT_PORT = 0xff;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	88 bb       	out	0x18, r24	; 24
			if(get_button(BUTTON1_PIN,BUTTON1)) pStopwatch->state = RUNNING;
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	6b df       	rcall	.-298    	; 0xd0 <get_button>
 1fa:	89 2b       	or	r24, r25
 1fc:	09 f4       	brne	.+2      	; 0x200 <stop_watch_state+0x32>
 1fe:	3f c0       	rjmp	.+126    	; 0x27e <stop_watch_state+0xb0>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	8d 83       	std	Y+5, r24	; 0x05
 204:	3c c0       	rjmp	.+120    	; 0x27e <stop_watch_state+0xb0>
			break;
		case RUNNING:
			if(pStopwatch->ms_count >= 1000){
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	88 3e       	cpi	r24, 0xE8	; 232
 20c:	93 40       	sbci	r25, 0x03	; 3
 20e:	90 f0       	brcs	.+36     	; 0x234 <stop_watch_state+0x66>
				pStopwatch->ms_count = 0;
 210:	1a 82       	std	Y+2, r1	; 0x02
 212:	19 82       	std	Y+1, r1	; 0x01
				pStopwatch->sec_count++;
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	9c 81       	ldd	r25, Y+4	; 0x04
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	9c 83       	std	Y+4, r25	; 0x04
 21c:	8b 83       	std	Y+3, r24	; 0x03
				if(main_stopwatch_ptr->sec_count == 600){
 21e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <main_stopwatch_ptr>
 222:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <main_stopwatch_ptr+0x1>
 226:	83 81       	ldd	r24, Z+3	; 0x03
 228:	94 81       	ldd	r25, Z+4	; 0x04
 22a:	88 35       	cpi	r24, 0x58	; 88
 22c:	92 40       	sbci	r25, 0x02	; 2
 22e:	11 f4       	brne	.+4      	; 0x234 <stop_watch_state+0x66>
					// 10분이되면 초기화
					main_stopwatch_ptr->sec_count = 0;
 230:	14 82       	std	Z+4, r1	; 0x04
 232:	13 82       	std	Z+3, r1	; 0x03
				}
			}
			if(get_button(BUTTON1_PIN,BUTTON1)) pStopwatch->state = PAUSED;
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	49 df       	rcall	.-366    	; 0xd0 <get_button>
 23e:	89 2b       	or	r24, r25
 240:	19 f0       	breq	.+6      	; 0x248 <stop_watch_state+0x7a>
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	8d 83       	std	Y+5, r24	; 0x05
 246:	1b c0       	rjmp	.+54     	; 0x27e <stop_watch_state+0xb0>
			else if(get_button(BUTTON2_PIN,BUTTON2)) pStopwatch->state = IDLE;
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	85 e0       	ldi	r24, 0x05	; 5
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	3f df       	rcall	.-386    	; 0xd0 <get_button>
 252:	89 2b       	or	r24, r25
 254:	a1 f0       	breq	.+40     	; 0x27e <stop_watch_state+0xb0>
 256:	1d 82       	std	Y+5, r1	; 0x05
 258:	12 c0       	rjmp	.+36     	; 0x27e <stop_watch_state+0xb0>
			break;
		case PAUSED:
			if(get_button(BUTTON1_PIN,BUTTON1)) pStopwatch->state = RUNNING;
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	84 e0       	ldi	r24, 0x04	; 4
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	36 df       	rcall	.-404    	; 0xd0 <get_button>
 264:	89 2b       	or	r24, r25
 266:	19 f0       	breq	.+6      	; 0x26e <stop_watch_state+0xa0>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	8d 83       	std	Y+5, r24	; 0x05
 26c:	08 c0       	rjmp	.+16     	; 0x27e <stop_watch_state+0xb0>
			else if(get_button(BUTTON2_PIN,BUTTON2)) pStopwatch->state = IDLE;
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	85 e0       	ldi	r24, 0x05	; 5
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	2c df       	rcall	.-424    	; 0xd0 <get_button>
 278:	89 2b       	or	r24, r25
 27a:	09 f0       	breq	.+2      	; 0x27e <stop_watch_state+0xb0>
 27c:	1d 82       	std	Y+5, r1	; 0x05
			break;
	}
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <fnd_display>:


// display the FND
void fnd_display(Stopwatch* pStopwatch){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	2b 97       	sbiw	r28, 0x0b	; 11
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	ac 01       	movw	r20, r24
	if(pStopwatch->state != IDLE){
 29a:	dc 01       	movw	r26, r24
 29c:	15 96       	adiw	r26, 0x05	; 5
 29e:	8c 91       	ld	r24, X
 2a0:	88 23       	and	r24, r24
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <fnd_display+0x22>
 2a4:	dc c0       	rjmp	.+440    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		// 0을 찍을려면 g빼고 1로 16진수값 3F입니다, b는 0011_1111(common anode)
		// common cathode는 1100_0000이고, 16진수로 C0
		//0    1     2     3    4    5    6    7    8    9		dp(10번방)
		unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x7f};
 2a6:	8b e0       	ldi	r24, 0x0B	; 11
 2a8:	e0 e0       	ldi	r30, 0x00	; 0
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	de 01       	movw	r26, r28
 2ae:	11 96       	adiw	r26, 0x01	; 1
 2b0:	01 90       	ld	r0, Z+
 2b2:	0d 92       	st	X+, r0
 2b4:	8a 95       	dec	r24
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <fnd_display+0x2c>

		static int digit_position = 0; // 자리수 선택  변수 0~3 : 0,1,2,3

		switch(digit_position){
 2b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <digit_position.2111>
 2bc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <digit_position.2111+0x1>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	91 05       	cpc	r25, r1
 2c4:	e1 f1       	breq	.+120    	; 0x33e <fnd_display+0xba>
 2c6:	1c f4       	brge	.+6      	; 0x2ce <fnd_display+0x4a>
 2c8:	89 2b       	or	r24, r25
 2ca:	49 f0       	breq	.+18     	; 0x2de <fnd_display+0x5a>
 2cc:	bf c0       	rjmp	.+382    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	91 05       	cpc	r25, r1
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <fnd_display+0x52>
 2d4:	5c c0       	rjmp	.+184    	; 0x38e <fnd_display+0x10a>
 2d6:	03 97       	sbiw	r24, 0x03	; 3
 2d8:	09 f4       	brne	.+2      	; 0x2dc <fnd_display+0x58>
 2da:	85 c0       	rjmp	.+266    	; 0x3e6 <fnd_display+0x162>
 2dc:	b7 c0       	rjmp	.+366    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		case 0: // 1단위 : 10분의1초 마다(0~9)
			FND_DIGIT_PORT = ~0b10000000; // cathode
 2de:	8f e7       	ldi	r24, 0x7F	; 127
 2e0:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = fnd_font[pStopwatch->ms_count/100%10];
 2e2:	fa 01       	movw	r30, r20
 2e4:	21 81       	ldd	r18, Z+1	; 0x01
 2e6:	32 81       	ldd	r19, Z+2	; 0x02
 2e8:	36 95       	lsr	r19
 2ea:	27 95       	ror	r18
 2ec:	36 95       	lsr	r19
 2ee:	27 95       	ror	r18
 2f0:	ab e7       	ldi	r26, 0x7B	; 123
 2f2:	b4 e1       	ldi	r27, 0x14	; 20
 2f4:	d9 d0       	rcall	.+434    	; 0x4a8 <__umulhisi3>
 2f6:	fc 01       	movw	r30, r24
 2f8:	f6 95       	lsr	r31
 2fa:	e7 95       	ror	r30
 2fc:	9f 01       	movw	r18, r30
 2fe:	ad ec       	ldi	r26, 0xCD	; 205
 300:	bc ec       	ldi	r27, 0xCC	; 204
 302:	d2 d0       	rcall	.+420    	; 0x4a8 <__umulhisi3>
 304:	96 95       	lsr	r25
 306:	87 95       	ror	r24
 308:	96 95       	lsr	r25
 30a:	87 95       	ror	r24
 30c:	96 95       	lsr	r25
 30e:	87 95       	ror	r24
 310:	9c 01       	movw	r18, r24
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	82 0f       	add	r24, r18
 324:	93 1f       	adc	r25, r19
 326:	9f 01       	movw	r18, r30
 328:	28 1b       	sub	r18, r24
 32a:	39 0b       	sbc	r19, r25
 32c:	e1 e0       	ldi	r30, 0x01	; 1
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ec 0f       	add	r30, r28
 332:	fd 1f       	adc	r31, r29
 334:	e2 0f       	add	r30, r18
 336:	f3 1f       	adc	r31, r19
 338:	80 81       	ld	r24, Z
 33a:	85 bb       	out	0x15, r24	; 21
			break;
 33c:	87 c0       	rjmp	.+270    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		case 1: // 10단위 : 1s마다(0~9)
			FND_DIGIT_PORT = ~0b01000000; // cathode
 33e:	8f eb       	ldi	r24, 0xBF	; 191
 340:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT =fnd_font[pStopwatch->sec_count%10];
 342:	da 01       	movw	r26, r20
 344:	13 96       	adiw	r26, 0x03	; 3
 346:	ed 91       	ld	r30, X+
 348:	fc 91       	ld	r31, X
 34a:	14 97       	sbiw	r26, 0x04	; 4
 34c:	9f 01       	movw	r18, r30
 34e:	ad ec       	ldi	r26, 0xCD	; 205
 350:	bc ec       	ldi	r27, 0xCC	; 204
 352:	aa d0       	rcall	.+340    	; 0x4a8 <__umulhisi3>
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	96 95       	lsr	r25
 35e:	87 95       	ror	r24
 360:	9c 01       	movw	r18, r24
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	82 0f       	add	r24, r18
 374:	93 1f       	adc	r25, r19
 376:	9f 01       	movw	r18, r30
 378:	28 1b       	sub	r18, r24
 37a:	39 0b       	sbc	r19, r25
 37c:	e1 e0       	ldi	r30, 0x01	; 1
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	ec 0f       	add	r30, r28
 382:	fd 1f       	adc	r31, r29
 384:	e2 0f       	add	r30, r18
 386:	f3 1f       	adc	r31, r19
 388:	80 81       	ld	r24, Z
 38a:	85 bb       	out	0x15, r24	; 21
			break;
 38c:	5f c0       	rjmp	.+190    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		case 2: // 100단위 : 10단위s마다(0~6)
			FND_DIGIT_PORT = ~0b00100000; // cathode
 38e:	8f ed       	ldi	r24, 0xDF	; 223
 390:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = fnd_font[pStopwatch->sec_count/10%6];
 392:	da 01       	movw	r26, r20
 394:	13 96       	adiw	r26, 0x03	; 3
 396:	2d 91       	ld	r18, X+
 398:	3c 91       	ld	r19, X
 39a:	14 97       	sbiw	r26, 0x04	; 4
 39c:	ad ec       	ldi	r26, 0xCD	; 205
 39e:	bc ec       	ldi	r27, 0xCC	; 204
 3a0:	83 d0       	rcall	.+262    	; 0x4a8 <__umulhisi3>
 3a2:	fc 01       	movw	r30, r24
 3a4:	f6 95       	lsr	r31
 3a6:	e7 95       	ror	r30
 3a8:	f6 95       	lsr	r31
 3aa:	e7 95       	ror	r30
 3ac:	f6 95       	lsr	r31
 3ae:	e7 95       	ror	r30
 3b0:	9f 01       	movw	r18, r30
 3b2:	ab ea       	ldi	r26, 0xAB	; 171
 3b4:	ba ea       	ldi	r27, 0xAA	; 170
 3b6:	78 d0       	rcall	.+240    	; 0x4a8 <__umulhisi3>
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	9c 01       	movw	r18, r24
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	82 0f       	add	r24, r18
 3c8:	93 1f       	adc	r25, r19
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	9f 01       	movw	r18, r30
 3d0:	28 1b       	sub	r18, r24
 3d2:	39 0b       	sbc	r19, r25
 3d4:	e1 e0       	ldi	r30, 0x01	; 1
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	ec 0f       	add	r30, r28
 3da:	fd 1f       	adc	r31, r29
 3dc:	e2 0f       	add	r30, r18
 3de:	f3 1f       	adc	r31, r19
 3e0:	80 81       	ld	r24, Z
 3e2:	85 bb       	out	0x15, r24	; 21
			break;
 3e4:	33 c0       	rjmp	.+102    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		case 3: // 1000단위 : 분단위=60초마다(0~9)
			FND_DIGIT_PORT = ~0b00010000; // cathode
 3e6:	8f ee       	ldi	r24, 0xEF	; 239
 3e8:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = fnd_font[pStopwatch->sec_count/60%10];
 3ea:	da 01       	movw	r26, r20
 3ec:	13 96       	adiw	r26, 0x03	; 3
 3ee:	2d 91       	ld	r18, X+
 3f0:	3c 91       	ld	r19, X
 3f2:	14 97       	sbiw	r26, 0x04	; 4
 3f4:	a9 e8       	ldi	r26, 0x89	; 137
 3f6:	b8 e8       	ldi	r27, 0x88	; 136
 3f8:	57 d0       	rcall	.+174    	; 0x4a8 <__umulhisi3>
 3fa:	fc 01       	movw	r30, r24
 3fc:	f6 95       	lsr	r31
 3fe:	e7 95       	ror	r30
 400:	f2 95       	swap	r31
 402:	e2 95       	swap	r30
 404:	ef 70       	andi	r30, 0x0F	; 15
 406:	ef 27       	eor	r30, r31
 408:	ff 70       	andi	r31, 0x0F	; 15
 40a:	ef 27       	eor	r30, r31
 40c:	9f 01       	movw	r18, r30
 40e:	ad ec       	ldi	r26, 0xCD	; 205
 410:	bc ec       	ldi	r27, 0xCC	; 204
 412:	4a d0       	rcall	.+148    	; 0x4a8 <__umulhisi3>
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	96 95       	lsr	r25
 41a:	87 95       	ror	r24
 41c:	96 95       	lsr	r25
 41e:	87 95       	ror	r24
 420:	9c 01       	movw	r18, r24
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	82 0f       	add	r24, r18
 434:	93 1f       	adc	r25, r19
 436:	9f 01       	movw	r18, r30
 438:	28 1b       	sub	r18, r24
 43a:	39 0b       	sbc	r19, r25
 43c:	e1 e0       	ldi	r30, 0x01	; 1
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	ec 0f       	add	r30, r28
 442:	fd 1f       	adc	r31, r29
 444:	e2 0f       	add	r30, r18
 446:	f3 1f       	adc	r31, r19
 448:	80 81       	ld	r24, Z
 44a:	85 bb       	out	0x15, r24	; 21
			break;
		}
		digit_position = pStopwatch->display_count; // digit_position = stopwatch->display_count;
 44c:	da 01       	movw	r26, r20
 44e:	8c 91       	ld	r24, X
 450:	90 e0       	ldi	r25, 0x00	; 0
		digit_position %= 8; // 다음 표시할 자리수를 준비하고 함수 종료
 452:	87 70       	andi	r24, 0x07	; 7
 454:	90 78       	andi	r25, 0x80	; 128
 456:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <digit_position.2111+0x1>
 45a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <digit_position.2111>
	}	
}
 45e:	2b 96       	adiw	r28, 0x0b	; 11
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	de bf       	out	0x3e, r29	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	cd bf       	out	0x3d, r28	; 61
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <main>:
	}
}


int main(void)
{
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	00 d0       	rcall	.+0      	; 0x476 <main+0x6>
 476:	00 d0       	rcall	.+0      	; 0x478 <main+0x8>
 478:	00 d0       	rcall	.+0      	; 0x47a <main+0xa>
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
	// display_count = 0;
	// ms_count = 0;
	// sec_count = 0;
	// state = IDLE
    Stopwatch stopwatch = {0,0,0,IDLE};
 47e:	fe 01       	movw	r30, r28
 480:	31 96       	adiw	r30, 0x01	; 1
 482:	86 e0       	ldi	r24, 0x06	; 6
 484:	df 01       	movw	r26, r30
 486:	1d 92       	st	X+, r1
 488:	8a 95       	dec	r24
 48a:	e9 f7       	brne	.-6      	; 0x486 <main+0x16>
	main_stopwatch_ptr = &stopwatch;
 48c:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <main_stopwatch_ptr+0x1>
 490:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <main_stopwatch_ptr>
	
	init_fnd();
 494:	61 de       	rcall	.-830    	; 0x158 <init_fnd>
	init_button();
 496:	18 de       	rcall	.-976    	; 0xc8 <init_button>
	init_timer0();
 498:	66 de       	rcall	.-820    	; 0x166 <init_timer0>
	
    while (1) 
    {
		stop_watch_state(&stopwatch);
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	97 de       	rcall	.-722    	; 0x1ce <stop_watch_state>
		fnd_display(&stopwatch);
 4a0:	ce 01       	movw	r24, r28
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	ef de       	rcall	.-546    	; 0x284 <fnd_display>
 4a6:	f9 cf       	rjmp	.-14     	; 0x49a <main+0x2a>

000004a8 <__umulhisi3>:
 4a8:	a2 9f       	mul	r26, r18
 4aa:	b0 01       	movw	r22, r0
 4ac:	b3 9f       	mul	r27, r19
 4ae:	c0 01       	movw	r24, r0
 4b0:	a3 9f       	mul	r26, r19
 4b2:	70 0d       	add	r23, r0
 4b4:	81 1d       	adc	r24, r1
 4b6:	11 24       	eor	r1, r1
 4b8:	91 1d       	adc	r25, r1
 4ba:	b2 9f       	mul	r27, r18
 4bc:	70 0d       	add	r23, r0
 4be:	81 1d       	adc	r24, r1
 4c0:	11 24       	eor	r1, r1
 4c2:	91 1d       	adc	r25, r1
 4c4:	08 95       	ret

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
