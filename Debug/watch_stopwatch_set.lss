
watch_stopwatch_set.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000900  00000994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080010c  0080010c  000009a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001028  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3e  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080f  00000000  00000000  00002502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062e  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000479  00000000  00000000  00003482  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000038fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9b c0       	rjmp	.+310    	; 0x178 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d5 d3       	rcall	.+1962   	; 0x86e <main>
  c4:	1b c4       	rjmp	.+2102   	; 0x8fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:

// 76543210
// DDRD &= 0x0f; // port[7:4]까지 input으로 선언된것
void init_button(void){
	// one's complement
	BUTTON_DDR &= ~((1<<BUTTON1_PIN) | (1<<BUTTON2_PIN) | (1<<BUTTON3_PIN) | (1<<BUTTON4_PIN));
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <get_button>:
int get_button(int button_pin, int button_number){
	int current_state;

	//예)BUTTON1은 4가 넘어옴, 2는 5, 3은 5...
	//BUTTON_PIN값은 눌리면1 안눌리면 0값을 감지함
	current_state = BUTTON_PIN & (1 << button_pin); // 10000 (1<<4결과)
  d0:	40 b3       	in	r20, 0x10	; 16
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <get_button+0x10>
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <get_button+0xc>
  e4:	cf 01       	movw	r24, r30
  e6:	84 23       	and	r24, r20
  e8:	95 23       	and	r25, r21
	//current_state변수로 버튼 값을 읽습니다.

	if(current_state && previous_button_status[button_number]== BUTTON_RELEASE){
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	b9 f0       	breq	.+46     	; 0x11c <get_button+0x4c>
  ee:	fb 01       	movw	r30, r22
  f0:	e4 5f       	subi	r30, 0xF4	; 244
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	20 81       	ld	r18, Z
  f6:	21 11       	cpse	r18, r1
  f8:	11 c0       	rjmp	.+34     	; 0x11c <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	ff ef       	ldi	r31, 0xFF	; 255
  fc:	2d ee       	ldi	r18, 0xED	; 237
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	f1 50       	subi	r31, 0x01	; 1
 102:	20 40       	sbci	r18, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <get_button+0x30>
 108:	00 c0       	rjmp	.+0      	; 0x10a <get_button+0x3a>
 10a:	00 00       	nop
		// 버튼이 처음 눌러진 상태
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		previous_button_status[button_number] = BUTTON_PRESS; // 처음 눌러진 상태가 아니다
 10c:	fb 01       	movw	r30, r22
 10e:	e4 5f       	subi	r30, 0xF4	; 244
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
		return 0; //아직 완전히 눌렀다 떼어진 상태가 아니다.
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
	} // 버튼이 이전에 눌러진 상태였으면 현재는 떼어진 상태
	else if(previous_button_status[button_number] == BUTTON_PRESS && current_state == BUTTON_RELEASE){
 11c:	fb 01       	movw	r30, r22
 11e:	e4 5f       	subi	r30, 0xF4	; 244
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	20 81       	ld	r18, Z
 124:	21 30       	cpi	r18, 0x01	; 1
 126:	91 f4       	brne	.+36     	; 0x14c <get_button+0x7c>
 128:	89 2b       	or	r24, r25
 12a:	99 f4       	brne	.+38     	; 0x152 <get_button+0x82>
		previous_button_status[button_number] = BUTTON_RELEASE; // 다음 버튼 상태를 체크하기 위해 초기화
 12c:	fb 01       	movw	r30, r22
 12e:	e4 5f       	subi	r30, 0xF4	; 244
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	10 82       	st	Z, r1
 134:	9f ef       	ldi	r25, 0xFF	; 255
 136:	ed ee       	ldi	r30, 0xED	; 237
 138:	f2 e0       	ldi	r31, 0x02	; 2
 13a:	91 50       	subi	r25, 0x01	; 1
 13c:	e0 40       	sbci	r30, 0x00	; 0
 13e:	f0 40       	sbci	r31, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <get_button+0x6a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <get_button+0x74>
 144:	00 00       	nop
		_delay_ms(60); // 노이즈가 지나가기를 기다린다.
		return 1; // 완전히 눌렀다 떼어진 상태
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
	}
	// 아직 HIGH인 상태인 것이지
	// 아직 완전히 스위치를 눌렀다 뗀 상태가 아니거나 스위치가 open된 상태 -> return 0;
	return 0;
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <init_fnd>:
﻿#include "fnd.h"

void init_fnd(void){
	// PortC를 모두 출력(FND 8pin)으로 하는거니까 모두 write모드로 하기
	FND_DATA_DDR = 0xFF;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	84 bb       	out	0x14, r24	; 20
	FND_DIGIT_DDR |= 0xF0;// 4,5,6,7만 출력이니까 거기만 write모드
 15c:	87 b3       	in	r24, 0x17	; 23
 15e:	80 6f       	ori	r24, 0xF0	; 240
 160:	87 bb       	out	0x17, r24	; 23
	
	FND_DATA_PORT = 0x00; // PORTC 설정 : FND를 all off
 162:	15 ba       	out	0x15, r1	; 21
 164:	08 95       	ret

00000166 <init_timer0>:
void fnd_display(Stopwatch* pStopwatch, Min2Sec_Clock* pMin2sec_clock);
void init_timer0();

//timer0를 초기화 한다.
void init_timer0(){
	TCNT0 = 6; // 6부터 count하는것임, TCNT : 0~256카운트하기때문에, 정확히 1ms마다 TIMER0_OVF_vect로 진입한다.
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	82 bf       	out	0x32, r24	; 50

	TCCR0 |= (1 << CS02) | (0 << CS01) | (0 << CS00); // (1)분주비 64로 셋팅(p.296 표13-1 참고)
 16a:	83 b7       	in	r24, 0x33	; 51
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0; // (2) TIMER0 overflow interrupt허용
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	87 bf       	out	0x37, r24	; 55
	sei(); // 전역 인터럽트 허용
 174:	78 94       	sei
 176:	08 95       	ret

00000178 <__vector_16>:
}

// 256개의 pulse(=1ms)를 count하면 이곳으로 자동적으로 진입한다.
// 즉, 256개의 pulse == 1ms
ISR(TIMER0_OVF_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	0b b6       	in	r0, 0x3b	; 59
 184:	0f 92       	push	r0
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	/* 인터럽트 루틴을 가능한 짧게 짜라, ms_count만 증가시키고 빠져나오게함 */
	TCNT0=6; // 6 ~ 256개의 pulse카운트 --> 1ms를 맞춰주기 위해서 TCNT0을 6으로 설정
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	82 bf       	out	0x32, r24	; 50
	main_stopwatch_ptr->display_count++;
 192:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <main_stopwatch_ptr>
 196:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <main_stopwatch_ptr+0x1>
 19a:	80 81       	ld	r24, Z
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 83       	st	Z, r24
	main_min2secClock_ptr->display_count++;
 1a0:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <main_min2secClock_ptr>
 1a4:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <main_min2secClock_ptr+0x1>
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	80 83       	st	Z, r24
	if(main_stopwatch_ptr->state == STOPWATCH_RUNNING){
 1ae:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <main_stopwatch_ptr>
 1b2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <main_stopwatch_ptr+0x1>
 1b6:	85 81       	ldd	r24, Z+5	; 0x05
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	29 f4       	brne	.+10     	; 0x1c6 <__vector_16+0x4e>
		main_stopwatch_ptr->ms_count++;
 1bc:	81 81       	ldd	r24, Z+1	; 0x01
 1be:	92 81       	ldd	r25, Z+2	; 0x02
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	92 83       	std	Z+2, r25	; 0x02
 1c4:	81 83       	std	Z+1, r24	; 0x01
	}
	if(main_min2secClock_ptr->state == CLOCK_RUNNING){
 1c6:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <main_min2secClock_ptr>
 1ca:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <main_min2secClock_ptr+0x1>
 1ce:	85 81       	ldd	r24, Z+5	; 0x05
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	29 f4       	brne	.+10     	; 0x1de <__vector_16+0x66>
		main_min2secClock_ptr->ms_count++;
 1d4:	81 81       	ldd	r24, Z+1	; 0x01
 1d6:	92 81       	ldd	r25, Z+2	; 0x02
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	92 83       	std	Z+2, r25	; 0x02
 1dc:	81 83       	std	Z+1, r24	; 0x01
	}
	if(main_min2secClock_ptr->state == CHANGE_MIN || main_min2secClock_ptr->state == CHANGE_SEC){
 1de:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <main_min2secClock_ptr>
 1e2:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <main_min2secClock_ptr+0x1>
 1e6:	85 81       	ldd	r24, Z+5	; 0x05
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <__vector_16+0x7a>
 1ec:	85 81       	ldd	r24, Z+5	; 0x05
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	29 f4       	brne	.+10     	; 0x1fc <__vector_16+0x84>
		main_min2secClock_ptr->ms_blinking++;
 1f2:	87 81       	ldd	r24, Z+7	; 0x07
 1f4:	90 85       	ldd	r25, Z+8	; 0x08
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	90 87       	std	Z+8, r25	; 0x08
 1fa:	87 83       	std	Z+7, r24	; 0x07
	}
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	0f 90       	pop	r0
 206:	0b be       	out	0x3b, r0	; 59
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <min2sec_clock_state>:
		min2sec_clock_state(&stopwatch,&min2sec_clock);
		fnd_display(&stopwatch,&min2sec_clock);
    }
}

void min2sec_clock_state(Stopwatch* pStopwatch, Min2Sec_Clock* pMin2sec_clock){
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
	if(pStopwatch->state == STOPWATCH_IDLE && pMin2sec_clock->state!= CLOCK_IDLE){
 21a:	fc 01       	movw	r30, r24
 21c:	25 81       	ldd	r18, Z+5	; 0x05
 21e:	21 11       	cpse	r18, r1
 220:	9d c0       	rjmp	.+314    	; 0x35c <min2sec_clock_state+0x14a>
 222:	fb 01       	movw	r30, r22
 224:	25 81       	ldd	r18, Z+5	; 0x05
 226:	22 23       	and	r18, r18
 228:	09 f4       	brne	.+2      	; 0x22c <min2sec_clock_state+0x1a>
 22a:	98 c0       	rjmp	.+304    	; 0x35c <min2sec_clock_state+0x14a>
 22c:	eb 01       	movw	r28, r22
 22e:	8c 01       	movw	r16, r24
		switch (pMin2sec_clock->state){
 230:	22 30       	cpi	r18, 0x02	; 2
 232:	d1 f1       	breq	.+116    	; 0x2a8 <min2sec_clock_state+0x96>
 234:	23 30       	cpi	r18, 0x03	; 3
 236:	09 f4       	brne	.+2      	; 0x23a <min2sec_clock_state+0x28>
 238:	6a c0       	rjmp	.+212    	; 0x30e <min2sec_clock_state+0xfc>
 23a:	21 30       	cpi	r18, 0x01	; 1
 23c:	09 f0       	breq	.+2      	; 0x240 <min2sec_clock_state+0x2e>
 23e:	8e c0       	rjmp	.+284    	; 0x35c <min2sec_clock_state+0x14a>
			case CLOCK_RUNNING:
				// increase clock time
				if(pMin2sec_clock->ms_count >= 1000){
 240:	81 81       	ldd	r24, Z+1	; 0x01
 242:	92 81       	ldd	r25, Z+2	; 0x02
 244:	88 3e       	cpi	r24, 0xE8	; 232
 246:	93 40       	sbci	r25, 0x03	; 3
 248:	b0 f0       	brcs	.+44     	; 0x276 <min2sec_clock_state+0x64>
					pMin2sec_clock->ms_count = 0;
 24a:	1a 82       	std	Y+2, r1	; 0x02
 24c:	19 82       	std	Y+1, r1	; 0x01
					pMin2sec_clock->sec_count++;
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	9c 81       	ldd	r25, Y+4	; 0x04
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	9c 83       	std	Y+4, r25	; 0x04
 256:	8b 83       	std	Y+3, r24	; 0x03
					
					 PORTA ^= (1 << 1); // Toggle the state of the LED
 258:	9b b3       	in	r25, 0x1b	; 27
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	89 27       	eor	r24, r25
 25e:	8b bb       	out	0x1b, r24	; 27
					
					if(main_min2secClock_ptr->sec_count == 3600){
 260:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <main_min2secClock_ptr>
 264:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <main_min2secClock_ptr+0x1>
 268:	83 81       	ldd	r24, Z+3	; 0x03
 26a:	94 81       	ldd	r25, Z+4	; 0x04
 26c:	80 31       	cpi	r24, 0x10	; 16
 26e:	9e 40       	sbci	r25, 0x0E	; 14
 270:	11 f4       	brne	.+4      	; 0x276 <min2sec_clock_state+0x64>
						//60 분이되면 초기화
						main_min2secClock_ptr->sec_count = 0;
 272:	14 82       	std	Z+4, r1	; 0x04
 274:	13 82       	std	Z+3, r1	; 0x03
					}
				}
				// Back to stopwatch mode
				if(get_button(BUTTON1_PIN,BUTTON1)) {
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	28 df       	rcall	.-432    	; 0xd0 <get_button>
 280:	89 2b       	or	r24, r25
 282:	31 f0       	breq	.+12     	; 0x290 <min2sec_clock_state+0x7e>
					PORTA = 0x00; // LED off
 284:	1b ba       	out	0x1b, r1	; 27
					pStopwatch->state = STOPWATCH_RUNNING;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	f8 01       	movw	r30, r16
 28a:	85 83       	std	Z+5, r24	; 0x05
					pMin2sec_clock->state = CLOCK_IDLE;
 28c:	1d 82       	std	Y+5, r1	; 0x05
 28e:	66 c0       	rjmp	.+204    	; 0x35c <min2sec_clock_state+0x14a>
				}
				// change second
				else if(get_button(BUTTON2_PIN,BUTTON2)) {
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	1b df       	rcall	.-458    	; 0xd0 <get_button>
 29a:	89 2b       	or	r24, r25
 29c:	09 f4       	brne	.+2      	; 0x2a0 <min2sec_clock_state+0x8e>
 29e:	5e c0       	rjmp	.+188    	; 0x35c <min2sec_clock_state+0x14a>
					PORTA = 0x00; // LED off
 2a0:	1b ba       	out	0x1b, r1	; 27
					pMin2sec_clock->state = CHANGE_SEC;
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	8d 83       	std	Y+5, r24	; 0x05
 2a6:	5a c0       	rjmp	.+180    	; 0x35c <min2sec_clock_state+0x14a>
				}
				break;
			case CHANGE_SEC:
				// Blinks the digits of second and toggle led per 1second.
				if(pMin2sec_clock->ms_blinking >= 1000){
 2a8:	87 81       	ldd	r24, Z+7	; 0x07
 2aa:	90 85       	ldd	r25, Z+8	; 0x08
 2ac:	88 3e       	cpi	r24, 0xE8	; 232
 2ae:	93 40       	sbci	r25, 0x03	; 3
 2b0:	58 f0       	brcs	.+22     	; 0x2c8 <min2sec_clock_state+0xb6>
					pMin2sec_clock->ms_blinking = 0;
 2b2:	18 86       	std	Y+8, r1	; 0x08
 2b4:	1f 82       	std	Y+7, r1	; 0x07
					//  Blinks the digits of second
					pMin2sec_clock->blink_visible = !pMin2sec_clock->blink_visible;
 2b6:	9e 81       	ldd	r25, Y+6	; 0x06
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	91 11       	cpse	r25, r1
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	8e 83       	std	Y+6, r24	; 0x06
					PORTA ^= (1 << 2); // Toggle the state of the LED	
 2c0:	9b b3       	in	r25, 0x1b	; 27
 2c2:	84 e0       	ldi	r24, 0x04	; 4
 2c4:	89 27       	eor	r24, r25
 2c6:	8b bb       	out	0x1b, r24	; 27
				}
				if(get_button(BUTTON1_PIN,BUTTON1)) {
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ff de       	rcall	.-514    	; 0xd0 <get_button>
 2d2:	89 2b       	or	r24, r25
 2d4:	21 f0       	breq	.+8      	; 0x2de <min2sec_clock_state+0xcc>
					// Back to CLOCK_RUNNING
					PORTA = 0x00; // LED off
 2d6:	1b ba       	out	0x1b, r1	; 27
					pMin2sec_clock->state = CLOCK_RUNNING;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	8d 83       	std	Y+5, r24	; 0x05
 2dc:	3f c0       	rjmp	.+126    	; 0x35c <min2sec_clock_state+0x14a>
				}else if(get_button(BUTTON2_PIN,BUTTON2)){
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	85 e0       	ldi	r24, 0x05	; 5
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	f4 de       	rcall	.-536    	; 0xd0 <get_button>
 2e8:	89 2b       	or	r24, r25
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <min2sec_clock_state+0xe2>
					PORTA = 0x00; // LED off
 2ec:	1b ba       	out	0x1b, r1	; 27
					pMin2sec_clock->state = CHANGE_MIN;	
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	8d 83       	std	Y+5, r24	; 0x05
 2f2:	34 c0       	rjmp	.+104    	; 0x35c <min2sec_clock_state+0x14a>
				}else if(get_button(BUTTON3_PIN,BUTTON3)){
 2f4:	62 e0       	ldi	r22, 0x02	; 2
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	e9 de       	rcall	.-558    	; 0xd0 <get_button>
 2fe:	89 2b       	or	r24, r25
 300:	69 f1       	breq	.+90     	; 0x35c <min2sec_clock_state+0x14a>
					// Increase seconds
					pMin2sec_clock->sec_count++;
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	9c 81       	ldd	r25, Y+4	; 0x04
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	9c 83       	std	Y+4, r25	; 0x04
 30a:	8b 83       	std	Y+3, r24	; 0x03
 30c:	27 c0       	rjmp	.+78     	; 0x35c <min2sec_clock_state+0x14a>
					// Also blinks the digits of second
				}
				break;
			case CHANGE_MIN:
				// Blinks the digits of minutes and toggle led per 1second.
				if(pMin2sec_clock->ms_blinking >= 1000){
 30e:	87 81       	ldd	r24, Z+7	; 0x07
 310:	90 85       	ldd	r25, Z+8	; 0x08
 312:	88 3e       	cpi	r24, 0xE8	; 232
 314:	93 40       	sbci	r25, 0x03	; 3
 316:	58 f0       	brcs	.+22     	; 0x32e <min2sec_clock_state+0x11c>
					pMin2sec_clock->ms_blinking = 0;
 318:	10 86       	std	Z+8, r1	; 0x08
 31a:	17 82       	std	Z+7, r1	; 0x07
					// Blinks the digits of minutes
					pMin2sec_clock->blink_visible = !pMin2sec_clock->blink_visible;
 31c:	96 81       	ldd	r25, Z+6	; 0x06
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	91 11       	cpse	r25, r1
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	8e 83       	std	Y+6, r24	; 0x06
					PORTA ^= (1 << 3); // Toggle the state of the LED
 326:	9b b3       	in	r25, 0x1b	; 27
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	89 27       	eor	r24, r25
				}
				if(get_button(BUTTON2_PIN,BUTTON2)){
 32c:	8b bb       	out	0x1b, r24	; 27
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	85 e0       	ldi	r24, 0x05	; 5
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	cc de       	rcall	.-616    	; 0xd0 <get_button>
 338:	89 2b       	or	r24, r25
 33a:	21 f0       	breq	.+8      	; 0x344 <min2sec_clock_state+0x132>
					PORTA = 0x00; // LED off
 33c:	1b ba       	out	0x1b, r1	; 27
					pMin2sec_clock->state = CHANGE_SEC;
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	8d 83       	std	Y+5, r24	; 0x05
				}else if(get_button(BUTTON3_PIN,BUTTON3)){
 342:	0c c0       	rjmp	.+24     	; 0x35c <min2sec_clock_state+0x14a>
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	86 e0       	ldi	r24, 0x06	; 6
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	c1 de       	rcall	.-638    	; 0xd0 <get_button>
 34e:	89 2b       	or	r24, r25
 350:	29 f0       	breq	.+10     	; 0x35c <min2sec_clock_state+0x14a>
					// Increase minutes
					pMin2sec_clock->sec_count += 60;
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	9c 81       	ldd	r25, Y+4	; 0x04
 356:	cc 96       	adiw	r24, 0x3c	; 60
 358:	9c 83       	std	Y+4, r25	; 0x04
 35a:	8b 83       	std	Y+3, r24	; 0x03
				}
				break;
		}
	}
	return;
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <stop_watch_state>:

void stop_watch_state(Stopwatch* pStopwatch, Min2Sec_Clock* pMin2sec_clock){
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
	if(pMin2sec_clock->state == CLOCK_IDLE){
 370:	fb 01       	movw	r30, r22
 372:	95 81       	ldd	r25, Z+5	; 0x05
 374:	91 11       	cpse	r25, r1
 376:	6e c0       	rjmp	.+220    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 378:	8b 01       	movw	r16, r22
		switch(pStopwatch->state){
 37a:	8d 81       	ldd	r24, Y+5	; 0x05
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	b1 f0       	breq	.+44     	; 0x3ac <stop_watch_state+0x46>
 380:	20 f0       	brcs	.+8      	; 0x38a <stop_watch_state+0x24>
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	09 f4       	brne	.+2      	; 0x388 <stop_watch_state+0x22>
 386:	44 c0       	rjmp	.+136    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 388:	65 c0       	rjmp	.+202    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			case STOPWATCH_IDLE:
			pStopwatch->ms_count = 0;
 38a:	1a 82       	std	Y+2, r1	; 0x02
 38c:	19 82       	std	Y+1, r1	; 0x01
			pStopwatch->sec_count = 0;
 38e:	1c 82       	std	Y+4, r1	; 0x04
 390:	1b 82       	std	Y+3, r1	; 0x03
			FND_DIGIT_PORT = 0xff;
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	88 bb       	out	0x18, r24	; 24
			if(get_button(BUTTON1_PIN,BUTTON1)) {
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	98 de       	rcall	.-720    	; 0xd0 <get_button>
 3a0:	89 2b       	or	r24, r25
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <stop_watch_state+0x40>
 3a4:	57 c0       	rjmp	.+174    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				pStopwatch->state = STOPWATCH_RUNNING;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	8d 83       	std	Y+5, r24	; 0x05
 3aa:	54 c0       	rjmp	.+168    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			}
			break;
			case STOPWATCH_RUNNING:
			if(pStopwatch->ms_count >= 1000){
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	9a 81       	ldd	r25, Y+2	; 0x02
 3b0:	88 3e       	cpi	r24, 0xE8	; 232
 3b2:	93 40       	sbci	r25, 0x03	; 3
 3b4:	b0 f0       	brcs	.+44     	; 0x3e2 <stop_watch_state+0x7c>
				pStopwatch->ms_count = 0;
 3b6:	1a 82       	std	Y+2, r1	; 0x02
 3b8:	19 82       	std	Y+1, r1	; 0x01
				pStopwatch->sec_count++;
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	9c 81       	ldd	r25, Y+4	; 0x04
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	9c 83       	std	Y+4, r25	; 0x04
 3c2:	8b 83       	std	Y+3, r24	; 0x03
				PORTA ^= (1 << 0); // Toggle the state of the LED
 3c4:	9b b3       	in	r25, 0x1b	; 27
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	89 27       	eor	r24, r25
 3ca:	8b bb       	out	0x1b, r24	; 27
				if(main_stopwatch_ptr->sec_count == 600){
 3cc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <main_stopwatch_ptr>
 3d0:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <main_stopwatch_ptr+0x1>
 3d4:	83 81       	ldd	r24, Z+3	; 0x03
 3d6:	94 81       	ldd	r25, Z+4	; 0x04
 3d8:	88 35       	cpi	r24, 0x58	; 88
 3da:	92 40       	sbci	r25, 0x02	; 2
 3dc:	11 f4       	brne	.+4      	; 0x3e2 <stop_watch_state+0x7c>
					// 10분이되면 초기화
					main_stopwatch_ptr->sec_count = 0;
 3de:	14 82       	std	Z+4, r1	; 0x04
 3e0:	13 82       	std	Z+3, r1	; 0x03
				}
			}
			// Switch to Min2Sec_Clock
			if(get_button(BUTTON1_PIN,BUTTON1)) {
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	84 e0       	ldi	r24, 0x04	; 4
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	72 de       	rcall	.-796    	; 0xd0 <get_button>
 3ec:	89 2b       	or	r24, r25
 3ee:	31 f0       	breq	.+12     	; 0x3fc <stop_watch_state+0x96>
				PORTA = 0x00;
 3f0:	1b ba       	out	0x1b, r1	; 27
				pStopwatch->state = STOPWATCH_IDLE;
 3f2:	1d 82       	std	Y+5, r1	; 0x05
				pMin2sec_clock->state = CLOCK_RUNNING;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	f8 01       	movw	r30, r16
 3f8:	85 83       	std	Z+5, r24	; 0x05
 3fa:	2c c0       	rjmp	.+88     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			}
			else if(get_button(BUTTON2_PIN,BUTTON2)) pStopwatch->state = STOPWATCH_PAUSED;
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	85 e0       	ldi	r24, 0x05	; 5
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	65 de       	rcall	.-822    	; 0xd0 <get_button>
 406:	89 2b       	or	r24, r25
 408:	29 f1       	breq	.+74     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	8d 83       	std	Y+5, r24	; 0x05
 40e:	22 c0       	rjmp	.+68     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			break;
			case STOPWATCH_PAUSED:
			// Switch to Min2Sec_Clock
			if(get_button(BUTTON1_PIN,BUTTON1)) {
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	5b de       	rcall	.-842    	; 0xd0 <get_button>
 41a:	89 2b       	or	r24, r25
 41c:	31 f0       	breq	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
				PORTA = 0x00;
 41e:	1b ba       	out	0x1b, r1	; 27
				pStopwatch->state = STOPWATCH_IDLE;
 420:	1d 82       	std	Y+5, r1	; 0x05
				pMin2sec_clock->state = CLOCK_RUNNING;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	f8 01       	movw	r30, r16
 426:	85 83       	std	Z+5, r24	; 0x05
 428:	15 c0       	rjmp	.+42     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			}
			else if(get_button(BUTTON2_PIN,BUTTON2)) pStopwatch->state = STOPWATCH_RUNNING;
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	85 e0       	ldi	r24, 0x05	; 5
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	4e de       	rcall	.-868    	; 0xd0 <get_button>
 434:	89 2b       	or	r24, r25
 436:	19 f0       	breq	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	8d 83       	std	Y+5, r24	; 0x05
			else if(get_button(BUTTON3_PIN,BUTTON3)) {
 43c:	0b c0       	rjmp	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	86 e0       	ldi	r24, 0x06	; 6
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	44 de       	rcall	.-888    	; 0xd0 <get_button>
 448:	89 2b       	or	r24, r25
 44a:	21 f0       	breq	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				PORTA = 0x00;
 44c:	1b ba       	out	0x1b, r1	; 27
				pStopwatch->state = STOPWATCH_IDLE;
 44e:	1d 82       	std	Y+5, r1	; 0x05
				pMin2sec_clock->state = STOPWATCH_IDLE;
 450:	f8 01       	movw	r30, r16
 452:	15 82       	std	Z+5, r1	; 0x05
			};
			break;
		}
	}
	return;
}
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <fnd_display>:

// display the FND
void fnd_display(Stopwatch* pStopwatch, Min2Sec_Clock* pMin2sec_clock){
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	2b 97       	sbiw	r28, 0x0b	; 11
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	ac 01       	movw	r20, r24
 478:	8b 01       	movw	r16, r22
	if(pStopwatch->state != STOPWATCH_IDLE){
 47a:	dc 01       	movw	r26, r24
 47c:	15 96       	adiw	r26, 0x05	; 5
 47e:	8c 91       	ld	r24, X
 480:	88 23       	and	r24, r24
 482:	09 f4       	brne	.+2      	; 0x486 <fnd_display+0x28>
 484:	dd c0       	rjmp	.+442    	; 0x640 <fnd_display+0x1e2>
		// 0을 찍을려면 g빼고 1로 16진수값 3F입니다, b는 0011_1111(common anode)
		// common cathode는 1100_0000이고, 16진수로 C0
		//0    1     2     3    4    5    6    7    8    9		dp(10번방)
		unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x7f};
 486:	8b e0       	ldi	r24, 0x0B	; 11
 488:	e0 e0       	ldi	r30, 0x00	; 0
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	de 01       	movw	r26, r28
 48e:	11 96       	adiw	r26, 0x01	; 1
 490:	01 90       	ld	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	8a 95       	dec	r24
 496:	e1 f7       	brne	.-8      	; 0x490 <fnd_display+0x32>

		static int digit_position = 0; // 자리수 선택  변수 0~3 : 0,1,2,3

		switch(digit_position){
 498:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <digit_position.2145>
 49c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <digit_position.2145+0x1>
 4a0:	82 30       	cpi	r24, 0x02	; 2
 4a2:	91 05       	cpc	r25, r1
 4a4:	e1 f1       	breq	.+120    	; 0x51e <fnd_display+0xc0>
 4a6:	1c f4       	brge	.+6      	; 0x4ae <fnd_display+0x50>
 4a8:	89 2b       	or	r24, r25
 4aa:	49 f0       	breq	.+18     	; 0x4be <fnd_display+0x60>
 4ac:	bf c0       	rjmp	.+382    	; 0x62c <fnd_display+0x1ce>
 4ae:	84 30       	cpi	r24, 0x04	; 4
 4b0:	91 05       	cpc	r25, r1
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <fnd_display+0x58>
 4b4:	5c c0       	rjmp	.+184    	; 0x56e <fnd_display+0x110>
 4b6:	06 97       	sbiw	r24, 0x06	; 6
 4b8:	09 f4       	brne	.+2      	; 0x4bc <fnd_display+0x5e>
 4ba:	85 c0       	rjmp	.+266    	; 0x5c6 <fnd_display+0x168>
 4bc:	b7 c0       	rjmp	.+366    	; 0x62c <fnd_display+0x1ce>
		case 0: // 1단위 : 10분의1초 마다(0~9)
			FND_DIGIT_PORT = ~0b10000000; // cathode
 4be:	8f e7       	ldi	r24, 0x7F	; 127
 4c0:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = fnd_font[pStopwatch->ms_count/100%10];
 4c2:	fa 01       	movw	r30, r20
 4c4:	21 81       	ldd	r18, Z+1	; 0x01
 4c6:	32 81       	ldd	r19, Z+2	; 0x02
 4c8:	36 95       	lsr	r19
 4ca:	27 95       	ror	r18
 4cc:	36 95       	lsr	r19
 4ce:	27 95       	ror	r18
 4d0:	ab e7       	ldi	r26, 0x7B	; 123
 4d2:	b4 e1       	ldi	r27, 0x14	; 20
 4d4:	04 d2       	rcall	.+1032   	; 0x8de <__umulhisi3>
 4d6:	fc 01       	movw	r30, r24
 4d8:	f6 95       	lsr	r31
 4da:	e7 95       	ror	r30
 4dc:	9f 01       	movw	r18, r30
 4de:	ad ec       	ldi	r26, 0xCD	; 205
 4e0:	bc ec       	ldi	r27, 0xCC	; 204
 4e2:	fd d1       	rcall	.+1018   	; 0x8de <__umulhisi3>
 4e4:	96 95       	lsr	r25
 4e6:	87 95       	ror	r24
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	9c 01       	movw	r18, r24
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	82 0f       	add	r24, r18
 504:	93 1f       	adc	r25, r19
 506:	9f 01       	movw	r18, r30
 508:	28 1b       	sub	r18, r24
 50a:	39 0b       	sbc	r19, r25
 50c:	e1 e0       	ldi	r30, 0x01	; 1
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	ec 0f       	add	r30, r28
 512:	fd 1f       	adc	r31, r29
 514:	e2 0f       	add	r30, r18
 516:	f3 1f       	adc	r31, r19
 518:	80 81       	ld	r24, Z
 51a:	85 bb       	out	0x15, r24	; 21
			break;
 51c:	87 c0       	rjmp	.+270    	; 0x62c <fnd_display+0x1ce>
		case 2: // 10단위 : 1s마다(0~9)
			FND_DIGIT_PORT = ~0b01000000; // cathode
 51e:	8f eb       	ldi	r24, 0xBF	; 191
 520:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT =fnd_font[pStopwatch->sec_count%10];
 522:	da 01       	movw	r26, r20
 524:	13 96       	adiw	r26, 0x03	; 3
 526:	ed 91       	ld	r30, X+
 528:	fc 91       	ld	r31, X
 52a:	14 97       	sbiw	r26, 0x04	; 4
 52c:	9f 01       	movw	r18, r30
 52e:	ad ec       	ldi	r26, 0xCD	; 205
 530:	bc ec       	ldi	r27, 0xCC	; 204
 532:	d5 d1       	rcall	.+938    	; 0x8de <__umulhisi3>
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	96 95       	lsr	r25
 53e:	87 95       	ror	r24
 540:	9c 01       	movw	r18, r24
 542:	22 0f       	add	r18, r18
 544:	33 1f       	adc	r19, r19
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	82 0f       	add	r24, r18
 554:	93 1f       	adc	r25, r19
 556:	9f 01       	movw	r18, r30
 558:	28 1b       	sub	r18, r24
 55a:	39 0b       	sbc	r19, r25
 55c:	e1 e0       	ldi	r30, 0x01	; 1
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	ec 0f       	add	r30, r28
 562:	fd 1f       	adc	r31, r29
 564:	e2 0f       	add	r30, r18
 566:	f3 1f       	adc	r31, r19
 568:	80 81       	ld	r24, Z
 56a:	85 bb       	out	0x15, r24	; 21
			break;
 56c:	5f c0       	rjmp	.+190    	; 0x62c <fnd_display+0x1ce>
		case 4: // 100단위 : 10단위s마다(0~6)
			FND_DIGIT_PORT = ~0b00100000; // cathode
 56e:	8f ed       	ldi	r24, 0xDF	; 223
 570:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = fnd_font[pStopwatch->sec_count/10%6];
 572:	da 01       	movw	r26, r20
 574:	13 96       	adiw	r26, 0x03	; 3
 576:	2d 91       	ld	r18, X+
 578:	3c 91       	ld	r19, X
 57a:	14 97       	sbiw	r26, 0x04	; 4
 57c:	ad ec       	ldi	r26, 0xCD	; 205
 57e:	bc ec       	ldi	r27, 0xCC	; 204
 580:	ae d1       	rcall	.+860    	; 0x8de <__umulhisi3>
 582:	fc 01       	movw	r30, r24
 584:	f6 95       	lsr	r31
 586:	e7 95       	ror	r30
 588:	f6 95       	lsr	r31
 58a:	e7 95       	ror	r30
 58c:	f6 95       	lsr	r31
 58e:	e7 95       	ror	r30
 590:	9f 01       	movw	r18, r30
 592:	ab ea       	ldi	r26, 0xAB	; 171
 594:	ba ea       	ldi	r27, 0xAA	; 170
 596:	a3 d1       	rcall	.+838    	; 0x8de <__umulhisi3>
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	9c 01       	movw	r18, r24
 5a2:	22 0f       	add	r18, r18
 5a4:	33 1f       	adc	r19, r19
 5a6:	82 0f       	add	r24, r18
 5a8:	93 1f       	adc	r25, r19
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	9f 01       	movw	r18, r30
 5b0:	28 1b       	sub	r18, r24
 5b2:	39 0b       	sbc	r19, r25
 5b4:	e1 e0       	ldi	r30, 0x01	; 1
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	ec 0f       	add	r30, r28
 5ba:	fd 1f       	adc	r31, r29
 5bc:	e2 0f       	add	r30, r18
 5be:	f3 1f       	adc	r31, r19
 5c0:	80 81       	ld	r24, Z
 5c2:	85 bb       	out	0x15, r24	; 21
			break;
 5c4:	33 c0       	rjmp	.+102    	; 0x62c <fnd_display+0x1ce>
		case 6: // 1000단위 : 분단위=60초마다(0~9)
			FND_DIGIT_PORT = ~0b00010000; // cathode
 5c6:	8f ee       	ldi	r24, 0xEF	; 239
 5c8:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = fnd_font[pStopwatch->sec_count/60%10];
 5ca:	da 01       	movw	r26, r20
 5cc:	13 96       	adiw	r26, 0x03	; 3
 5ce:	2d 91       	ld	r18, X+
 5d0:	3c 91       	ld	r19, X
 5d2:	14 97       	sbiw	r26, 0x04	; 4
 5d4:	a9 e8       	ldi	r26, 0x89	; 137
 5d6:	b8 e8       	ldi	r27, 0x88	; 136
 5d8:	82 d1       	rcall	.+772    	; 0x8de <__umulhisi3>
 5da:	fc 01       	movw	r30, r24
 5dc:	f6 95       	lsr	r31
 5de:	e7 95       	ror	r30
 5e0:	f2 95       	swap	r31
 5e2:	e2 95       	swap	r30
 5e4:	ef 70       	andi	r30, 0x0F	; 15
 5e6:	ef 27       	eor	r30, r31
 5e8:	ff 70       	andi	r31, 0x0F	; 15
 5ea:	ef 27       	eor	r30, r31
 5ec:	9f 01       	movw	r18, r30
 5ee:	ad ec       	ldi	r26, 0xCD	; 205
 5f0:	bc ec       	ldi	r27, 0xCC	; 204
 5f2:	75 d1       	rcall	.+746    	; 0x8de <__umulhisi3>
 5f4:	96 95       	lsr	r25
 5f6:	87 95       	ror	r24
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
 5fc:	96 95       	lsr	r25
 5fe:	87 95       	ror	r24
 600:	9c 01       	movw	r18, r24
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	82 0f       	add	r24, r18
 614:	93 1f       	adc	r25, r19
 616:	9f 01       	movw	r18, r30
 618:	28 1b       	sub	r18, r24
 61a:	39 0b       	sbc	r19, r25
 61c:	e1 e0       	ldi	r30, 0x01	; 1
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	ec 0f       	add	r30, r28
 622:	fd 1f       	adc	r31, r29
 624:	e2 0f       	add	r30, r18
 626:	f3 1f       	adc	r31, r19
 628:	80 81       	ld	r24, Z
 62a:	85 bb       	out	0x15, r24	; 21
			break;
		}
		digit_position = pStopwatch->display_count; // digit_position = stopwatch->display_count;
 62c:	da 01       	movw	r26, r20
 62e:	8c 91       	ld	r24, X
 630:	90 e0       	ldi	r25, 0x00	; 0
		digit_position %= 8; // 다음 표시할 자리수를 준비하고 함수 종료
 632:	87 70       	andi	r24, 0x07	; 7
 634:	90 78       	andi	r25, 0x80	; 128
 636:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <digit_position.2145+0x1>
 63a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <digit_position.2145>
 63e:	0c c1       	rjmp	.+536    	; 0x858 <fnd_display+0x3fa>
	}	
	else if(pMin2sec_clock->state != CLOCK_IDLE){
 640:	fb 01       	movw	r30, r22
 642:	85 81       	ldd	r24, Z+5	; 0x05
 644:	88 23       	and	r24, r24
 646:	09 f4       	brne	.+2      	; 0x64a <fnd_display+0x1ec>
 648:	07 c1       	rjmp	.+526    	; 0x858 <fnd_display+0x3fa>
		// shows fnd when in clock mode
		unsigned char fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0,~0x99,~0x92,~0x82,~0xd8,~0x80,~0x98,~0x7f};
 64a:	8b e0       	ldi	r24, 0x0B	; 11
 64c:	e0 e0       	ldi	r30, 0x00	; 0
 64e:	f1 e0       	ldi	r31, 0x01	; 1
 650:	de 01       	movw	r26, r28
 652:	11 96       	adiw	r26, 0x01	; 1
 654:	01 90       	ld	r0, Z+
 656:	0d 92       	st	X+, r0
 658:	8a 95       	dec	r24
 65a:	e1 f7       	brne	.-8      	; 0x654 <fnd_display+0x1f6>

		static int digit_position = 0; // 자리수 선택  변수 0~3 : 0,1,2,3

		switch(digit_position){
 65c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <digit_position.2152>
 660:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <digit_position.2152+0x1>
 664:	82 30       	cpi	r24, 0x02	; 2
 666:	91 05       	cpc	r25, r1
 668:	09 f4       	brne	.+2      	; 0x66c <fnd_display+0x20e>
 66a:	3e c0       	rjmp	.+124    	; 0x6e8 <fnd_display+0x28a>
 66c:	1c f4       	brge	.+6      	; 0x674 <fnd_display+0x216>
 66e:	89 2b       	or	r24, r25
 670:	49 f0       	breq	.+18     	; 0x684 <fnd_display+0x226>
 672:	e9 c0       	rjmp	.+466    	; 0x846 <fnd_display+0x3e8>
 674:	84 30       	cpi	r24, 0x04	; 4
 676:	91 05       	cpc	r25, r1
 678:	09 f4       	brne	.+2      	; 0x67c <fnd_display+0x21e>
 67a:	6c c0       	rjmp	.+216    	; 0x754 <fnd_display+0x2f6>
 67c:	06 97       	sbiw	r24, 0x06	; 6
 67e:	09 f4       	brne	.+2      	; 0x682 <fnd_display+0x224>
 680:	a7 c0       	rjmp	.+334    	; 0x7d0 <fnd_display+0x372>
 682:	e1 c0       	rjmp	.+450    	; 0x846 <fnd_display+0x3e8>
			case 0: // 1단위 : 1seconds마다(0~9)
			FND_DIGIT_PORT = ~0b10000000; // cathode
 684:	8f e7       	ldi	r24, 0x7F	; 127
 686:	88 bb       	out	0x18, r24	; 24
			if(pMin2sec_clock->blink_visible && pMin2sec_clock->state == CHANGE_SEC){
 688:	db 01       	movw	r26, r22
 68a:	16 96       	adiw	r26, 0x06	; 6
 68c:	8c 91       	ld	r24, X
 68e:	16 97       	sbiw	r26, 0x06	; 6
 690:	88 23       	and	r24, r24
 692:	31 f0       	breq	.+12     	; 0x6a0 <fnd_display+0x242>
 694:	15 96       	adiw	r26, 0x05	; 5
 696:	8c 91       	ld	r24, X
 698:	82 30       	cpi	r24, 0x02	; 2
 69a:	11 f4       	brne	.+4      	; 0x6a0 <fnd_display+0x242>
				FND_DIGIT_PORT = ~0b00000000; // cathode
 69c:	8f ef       	ldi	r24, 0xFF	; 255
			}
			FND_DATA_PORT = fnd_font[pMin2sec_clock->sec_count%10];
 69e:	88 bb       	out	0x18, r24	; 24
 6a0:	f8 01       	movw	r30, r16
 6a2:	43 81       	ldd	r20, Z+3	; 0x03
 6a4:	54 81       	ldd	r21, Z+4	; 0x04
 6a6:	9a 01       	movw	r18, r20
 6a8:	ad ec       	ldi	r26, 0xCD	; 205
 6aa:	bc ec       	ldi	r27, 0xCC	; 204
 6ac:	18 d1       	rcall	.+560    	; 0x8de <__umulhisi3>
 6ae:	96 95       	lsr	r25
 6b0:	87 95       	ror	r24
 6b2:	96 95       	lsr	r25
 6b4:	87 95       	ror	r24
 6b6:	96 95       	lsr	r25
 6b8:	87 95       	ror	r24
 6ba:	9c 01       	movw	r18, r24
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	82 0f       	add	r24, r18
 6ce:	93 1f       	adc	r25, r19
 6d0:	9a 01       	movw	r18, r20
 6d2:	28 1b       	sub	r18, r24
 6d4:	39 0b       	sbc	r19, r25
 6d6:	e1 e0       	ldi	r30, 0x01	; 1
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	ec 0f       	add	r30, r28
 6dc:	fd 1f       	adc	r31, r29
 6de:	e2 0f       	add	r30, r18
 6e0:	f3 1f       	adc	r31, r19
 6e2:	80 81       	ld	r24, Z
 6e4:	85 bb       	out	0x15, r24	; 21
			break;
 6e6:	af c0       	rjmp	.+350    	; 0x846 <fnd_display+0x3e8>
			case 2: // 10단위 : 10단위 seconds마다(0~6)
			FND_DIGIT_PORT = ~0b01000000; // cathode
 6e8:	8f eb       	ldi	r24, 0xBF	; 191
 6ea:	88 bb       	out	0x18, r24	; 24
			if(pMin2sec_clock->blink_visible && pMin2sec_clock->state == CHANGE_SEC){
 6ec:	db 01       	movw	r26, r22
 6ee:	16 96       	adiw	r26, 0x06	; 6
 6f0:	8c 91       	ld	r24, X
 6f2:	16 97       	sbiw	r26, 0x06	; 6
 6f4:	88 23       	and	r24, r24
 6f6:	31 f0       	breq	.+12     	; 0x704 <fnd_display+0x2a6>
 6f8:	15 96       	adiw	r26, 0x05	; 5
 6fa:	8c 91       	ld	r24, X
 6fc:	82 30       	cpi	r24, 0x02	; 2
				FND_DIGIT_PORT = ~0b00000000; // cathode
 6fe:	11 f4       	brne	.+4      	; 0x704 <fnd_display+0x2a6>
 700:	8f ef       	ldi	r24, 0xFF	; 255
			}
			FND_DATA_PORT =fnd_font[pMin2sec_clock->sec_count/10%6];
 702:	88 bb       	out	0x18, r24	; 24
 704:	f8 01       	movw	r30, r16
 706:	23 81       	ldd	r18, Z+3	; 0x03
 708:	34 81       	ldd	r19, Z+4	; 0x04
 70a:	ad ec       	ldi	r26, 0xCD	; 205
 70c:	bc ec       	ldi	r27, 0xCC	; 204
 70e:	e7 d0       	rcall	.+462    	; 0x8de <__umulhisi3>
 710:	ac 01       	movw	r20, r24
 712:	56 95       	lsr	r21
 714:	47 95       	ror	r20
 716:	56 95       	lsr	r21
 718:	47 95       	ror	r20
 71a:	56 95       	lsr	r21
 71c:	47 95       	ror	r20
 71e:	9a 01       	movw	r18, r20
 720:	ab ea       	ldi	r26, 0xAB	; 171
 722:	ba ea       	ldi	r27, 0xAA	; 170
 724:	dc d0       	rcall	.+440    	; 0x8de <__umulhisi3>
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	9c 01       	movw	r18, r24
 730:	22 0f       	add	r18, r18
 732:	33 1f       	adc	r19, r19
 734:	82 0f       	add	r24, r18
 736:	93 1f       	adc	r25, r19
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	9a 01       	movw	r18, r20
 73e:	28 1b       	sub	r18, r24
 740:	39 0b       	sbc	r19, r25
 742:	e1 e0       	ldi	r30, 0x01	; 1
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	ec 0f       	add	r30, r28
 748:	fd 1f       	adc	r31, r29
 74a:	e2 0f       	add	r30, r18
 74c:	f3 1f       	adc	r31, r19
 74e:	80 81       	ld	r24, Z
 750:	85 bb       	out	0x15, r24	; 21
			break;
 752:	79 c0       	rjmp	.+242    	; 0x846 <fnd_display+0x3e8>
			case 4: // 100단위 : minutes단위=60초마다(0~9)
			FND_DIGIT_PORT = ~0b00100000; // cathode
 754:	8f ed       	ldi	r24, 0xDF	; 223
 756:	88 bb       	out	0x18, r24	; 24
			if(pMin2sec_clock->blink_visible && pMin2sec_clock->state == CHANGE_MIN){
 758:	db 01       	movw	r26, r22
 75a:	16 96       	adiw	r26, 0x06	; 6
 75c:	8c 91       	ld	r24, X
 75e:	16 97       	sbiw	r26, 0x06	; 6
 760:	88 23       	and	r24, r24
 762:	31 f0       	breq	.+12     	; 0x770 <fnd_display+0x312>
 764:	15 96       	adiw	r26, 0x05	; 5
 766:	8c 91       	ld	r24, X
 768:	83 30       	cpi	r24, 0x03	; 3
				FND_DIGIT_PORT = ~0b00000000; // cathode
 76a:	11 f4       	brne	.+4      	; 0x770 <fnd_display+0x312>
 76c:	8f ef       	ldi	r24, 0xFF	; 255
			}
			FND_DATA_PORT = fnd_font[pMin2sec_clock->sec_count/60%10];
 76e:	88 bb       	out	0x18, r24	; 24
 770:	f8 01       	movw	r30, r16
 772:	23 81       	ldd	r18, Z+3	; 0x03
 774:	34 81       	ldd	r19, Z+4	; 0x04
 776:	a9 e8       	ldi	r26, 0x89	; 137
 778:	b8 e8       	ldi	r27, 0x88	; 136
 77a:	b1 d0       	rcall	.+354    	; 0x8de <__umulhisi3>
 77c:	ac 01       	movw	r20, r24
 77e:	56 95       	lsr	r21
 780:	47 95       	ror	r20
 782:	52 95       	swap	r21
 784:	42 95       	swap	r20
 786:	4f 70       	andi	r20, 0x0F	; 15
 788:	45 27       	eor	r20, r21
 78a:	5f 70       	andi	r21, 0x0F	; 15
 78c:	45 27       	eor	r20, r21
 78e:	9a 01       	movw	r18, r20
 790:	ad ec       	ldi	r26, 0xCD	; 205
 792:	bc ec       	ldi	r27, 0xCC	; 204
 794:	a4 d0       	rcall	.+328    	; 0x8de <__umulhisi3>
 796:	96 95       	lsr	r25
 798:	87 95       	ror	r24
 79a:	96 95       	lsr	r25
 79c:	87 95       	ror	r24
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	9c 01       	movw	r18, r24
 7a4:	22 0f       	add	r18, r18
 7a6:	33 1f       	adc	r19, r19
 7a8:	88 0f       	add	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	82 0f       	add	r24, r18
 7b6:	93 1f       	adc	r25, r19
 7b8:	9a 01       	movw	r18, r20
 7ba:	28 1b       	sub	r18, r24
 7bc:	39 0b       	sbc	r19, r25
 7be:	e1 e0       	ldi	r30, 0x01	; 1
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	ec 0f       	add	r30, r28
 7c4:	fd 1f       	adc	r31, r29
 7c6:	e2 0f       	add	r30, r18
 7c8:	f3 1f       	adc	r31, r19
 7ca:	80 81       	ld	r24, Z
 7cc:	85 bb       	out	0x15, r24	; 21
			break;
 7ce:	3b c0       	rjmp	.+118    	; 0x846 <fnd_display+0x3e8>
			case 6: // 1000단위 : 10단위 minutes마다=600초마다(0~6)
			FND_DIGIT_PORT = ~0b00010000; // cathode
 7d0:	8f ee       	ldi	r24, 0xEF	; 239
 7d2:	88 bb       	out	0x18, r24	; 24
			if(pMin2sec_clock->blink_visible && pMin2sec_clock->state == CHANGE_MIN){
 7d4:	db 01       	movw	r26, r22
 7d6:	16 96       	adiw	r26, 0x06	; 6
 7d8:	8c 91       	ld	r24, X
 7da:	16 97       	sbiw	r26, 0x06	; 6
 7dc:	88 23       	and	r24, r24
 7de:	31 f0       	breq	.+12     	; 0x7ec <fnd_display+0x38e>
 7e0:	15 96       	adiw	r26, 0x05	; 5
 7e2:	8c 91       	ld	r24, X
 7e4:	83 30       	cpi	r24, 0x03	; 3
 7e6:	11 f4       	brne	.+4      	; 0x7ec <fnd_display+0x38e>
				FND_DIGIT_PORT = ~0b00000000; // cathode
 7e8:	8f ef       	ldi	r24, 0xFF	; 255
			}
			FND_DATA_PORT = fnd_font[pMin2sec_clock->sec_count/600%6];
 7ea:	88 bb       	out	0x18, r24	; 24
 7ec:	f8 01       	movw	r30, r16
 7ee:	23 81       	ldd	r18, Z+3	; 0x03
 7f0:	34 81       	ldd	r19, Z+4	; 0x04
 7f2:	36 95       	lsr	r19
 7f4:	27 95       	ror	r18
 7f6:	36 95       	lsr	r19
 7f8:	27 95       	ror	r18
 7fa:	36 95       	lsr	r19
 7fc:	27 95       	ror	r18
 7fe:	af e4       	ldi	r26, 0x4F	; 79
 800:	bb e1       	ldi	r27, 0x1B	; 27
 802:	6d d0       	rcall	.+218    	; 0x8de <__umulhisi3>
 804:	ac 01       	movw	r20, r24
 806:	56 95       	lsr	r21
 808:	47 95       	ror	r20
 80a:	56 95       	lsr	r21
 80c:	47 95       	ror	r20
 80e:	56 95       	lsr	r21
 810:	47 95       	ror	r20
 812:	9a 01       	movw	r18, r20
 814:	ab ea       	ldi	r26, 0xAB	; 171
 816:	ba ea       	ldi	r27, 0xAA	; 170
 818:	62 d0       	rcall	.+196    	; 0x8de <__umulhisi3>
 81a:	96 95       	lsr	r25
 81c:	87 95       	ror	r24
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	9c 01       	movw	r18, r24
 824:	22 0f       	add	r18, r18
 826:	33 1f       	adc	r19, r19
 828:	82 0f       	add	r24, r18
 82a:	93 1f       	adc	r25, r19
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	9a 01       	movw	r18, r20
 832:	28 1b       	sub	r18, r24
 834:	39 0b       	sbc	r19, r25
 836:	e1 e0       	ldi	r30, 0x01	; 1
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	ec 0f       	add	r30, r28
 83c:	fd 1f       	adc	r31, r29
 83e:	e2 0f       	add	r30, r18
 840:	f3 1f       	adc	r31, r19
 842:	80 81       	ld	r24, Z
 844:	85 bb       	out	0x15, r24	; 21
			break;
		}
		digit_position = pMin2sec_clock->display_count; // digit_position = stopwatch->display_count;
 846:	d8 01       	movw	r26, r16
 848:	8c 91       	ld	r24, X
 84a:	90 e0       	ldi	r25, 0x00	; 0
		digit_position %= 8; // 다음 표시할 자리수를 준비하고 함수 종료
 84c:	87 70       	andi	r24, 0x07	; 7
 84e:	90 78       	andi	r25, 0x80	; 128
 850:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <digit_position.2152+0x1>
 854:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <digit_position.2152>
	}
}
 858:	2b 96       	adiw	r28, 0x0b	; 11
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	f8 94       	cli
 85e:	de bf       	out	0x3e, r29	; 62
 860:	0f be       	out	0x3f, r0	; 63
 862:	cd bf       	out	0x3d, r28	; 61
 864:	df 91       	pop	r29
 866:	cf 91       	pop	r28
 868:	1f 91       	pop	r17
 86a:	0f 91       	pop	r16
 86c:	08 95       	ret

0000086e <main>:
	}
}


int main(void)
{
 86e:	cf 93       	push	r28
 870:	df 93       	push	r29
 872:	cd b7       	in	r28, 0x3d	; 61
 874:	de b7       	in	r29, 0x3e	; 62
 876:	2f 97       	sbiw	r28, 0x0f	; 15
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	f8 94       	cli
 87c:	de bf       	out	0x3e, r29	; 62
 87e:	0f be       	out	0x3f, r0	; 63
 880:	cd bf       	out	0x3d, r28	; 61
	//set up led register
	DDRA = 0xff; //출력모드 설정
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; // led all off
 886:	1b ba       	out	0x1b, r1	; 27
	/* initialize stopwatch */
	// display_count = 0;
	// ms_count = 0;
	// sec_count = 0;
	// state = STOPWATCH_IDLE
    Stopwatch stopwatch = {0,0,0,STOPWATCH_IDLE};
 888:	fe 01       	movw	r30, r28
 88a:	31 96       	adiw	r30, 0x01	; 1
 88c:	86 e0       	ldi	r24, 0x06	; 6
 88e:	df 01       	movw	r26, r30
 890:	1d 92       	st	X+, r1
 892:	8a 95       	dec	r24
 894:	e9 f7       	brne	.-6      	; 0x890 <main+0x22>
	main_stopwatch_ptr = &stopwatch;
 896:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <main_stopwatch_ptr+0x1>
 89a:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <main_stopwatch_ptr>
	// ms_count = 0;
	// sec_count = 0;
	// state = CLOCK_IDLE
	// blink_visible = 0
	// ms_blinking = 0
	Min2Sec_Clock min2sec_clock = {0,0,0,CLOCK_IDLE,0,0};
 89e:	36 96       	adiw	r30, 0x06	; 6
 8a0:	89 e0       	ldi	r24, 0x09	; 9
 8a2:	df 01       	movw	r26, r30
 8a4:	1d 92       	st	X+, r1
 8a6:	8a 95       	dec	r24
 8a8:	e9 f7       	brne	.-6      	; 0x8a4 <main+0x36>
	main_min2secClock_ptr = &min2sec_clock;
 8aa:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <main_min2secClock_ptr+0x1>
 8ae:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <main_min2secClock_ptr>
	
	init_fnd();
 8b2:	52 dc       	rcall	.-1884   	; 0x158 <init_fnd>
	init_button();
 8b4:	09 dc       	rcall	.-2030   	; 0xc8 <init_button>
	init_timer0();
 8b6:	57 dc       	rcall	.-1874   	; 0x166 <init_timer0>
 8b8:	be 01       	movw	r22, r28
	
    while (1) 
    {
		stop_watch_state(&stopwatch,&min2sec_clock);
 8ba:	69 5f       	subi	r22, 0xF9	; 249
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	ce 01       	movw	r24, r28
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	51 dd       	rcall	.-1374   	; 0x366 <stop_watch_state>
 8c4:	be 01       	movw	r22, r28
		min2sec_clock_state(&stopwatch,&min2sec_clock);
 8c6:	69 5f       	subi	r22, 0xF9	; 249
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	ce 01       	movw	r24, r28
 8cc:	01 96       	adiw	r24, 0x01	; 1
 8ce:	a1 dc       	rcall	.-1726   	; 0x212 <min2sec_clock_state>
 8d0:	be 01       	movw	r22, r28
		fnd_display(&stopwatch,&min2sec_clock);
 8d2:	69 5f       	subi	r22, 0xF9	; 249
 8d4:	7f 4f       	sbci	r23, 0xFF	; 255
 8d6:	ce 01       	movw	r24, r28
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	c1 dd       	rcall	.-1150   	; 0x45e <fnd_display>
 8dc:	ed cf       	rjmp	.-38     	; 0x8b8 <main+0x4a>

000008de <__umulhisi3>:
 8de:	a2 9f       	mul	r26, r18
 8e0:	b0 01       	movw	r22, r0
 8e2:	b3 9f       	mul	r27, r19
 8e4:	c0 01       	movw	r24, r0
 8e6:	a3 9f       	mul	r26, r19
 8e8:	70 0d       	add	r23, r0
 8ea:	81 1d       	adc	r24, r1
 8ec:	11 24       	eor	r1, r1
 8ee:	91 1d       	adc	r25, r1
 8f0:	b2 9f       	mul	r27, r18
 8f2:	70 0d       	add	r23, r0
 8f4:	81 1d       	adc	r24, r1
 8f6:	11 24       	eor	r1, r1
 8f8:	91 1d       	adc	r25, r1
 8fa:	08 95       	ret

000008fc <_exit>:
 8fc:	f8 94       	cli

000008fe <__stop_program>:
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <__stop_program>
